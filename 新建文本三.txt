这三条命令是将本地 Git 仓库关联到一个远程仓库，并将代码推送到远程仓库的流程。下面逐一解释它们的含义和作用：

---

### 1. **`git remote add origin https://github.com/tan/test.git`**

- **作用**：
  这是为本地仓库添加一个远程仓库地址，并命名为 `origin`（默认远程仓库名称）。
  
- **参数解析**：
  - `remote`: 用于管理远程仓库的命令。
  - `add`: 添加一个新的远程仓库。
  - `origin`: 这是远程仓库的默认别名，可以用其他名称替代，但通常用 `origin`。
  - `https://github.com/tan/test.git`: 这是远程仓库的 URL 地址。

- **执行结果**：
  本地仓库和远程仓库建立了关联，之后的推送、拉取可以通过 `origin` 指向远程仓库。

---

### 2. **`git branch -M main`**

- **作用**：
  将当前分支重命名为 `main`，并设置它为默认分支。

- **参数解析**：
  - `branch`: 用于管理分支的命令。
  - `-M`: 强制重命名分支。如果目标分支名称已经存在，会覆盖。
  - `main`: 新的分支名称。

- **执行结果**：
  当前分支被重命名为 `main`，如果原本分支是 `master`，现在变成了 `main`。

> ⚠️ **背景**：GitHub 从 2020 年开始，将新仓库的默认分支名称从 `master` 改为 `main`。此命令是为了与 GitHub 默认分支名称保持一致。

---

### 3. **`git push -u origin main`**

- **作用**：
  将本地 `main` 分支的内容推送到远程仓库的 `main` 分支，并将本地的 `main` 分支与远程的 `main` 分支绑定。

- **参数解析**：
  - `push`: 将本地分支的提交推送到远程仓库。
  - `-u` 或 `--set-upstream`: 设置本地分支与远程分支的跟踪关系。之后可以直接使用 `git push` 或 `git pull`。
  - `origin`: 指定推送的远程仓库（之前通过 `git remote add` 定义的别名）。
  - `main`: 指定推送的远程分支名称。

- **执行结果**：
  - 将本地分支的所有提交推送到远程仓库。
  - 本地 `main` 分支与远程 `origin/main` 分支绑定，方便后续同步操作。

---

### **完整流程描述**

1. **`git remote add origin ...`**  
   把远程仓库地址添加为本地仓库的默认远程别名（`origin`），建立关联。

2. **`git branch -M main`**  
   确保本地分支名称与远程仓库的默认分支名称（通常是 `main`）一致。

3. **`git push -u origin main`**  
   推送代码到远程仓库，同时绑定本地分支和远程分支，方便后续同步。

---

### **后续操作**

执行完以上命令后：
1. **推送更新**：以后直接用 `git push` 即可。
2. **拉取更新**：用 `git pull` 同步远程代码。

如果还有不清楚的部分，可以随时告诉我！ 😊